on:
  workflow_call:
    inputs:
      app-version:
        type: string
        required: false
        default: 'snapshot'
        description: 'Set the version that should be set/used as tag for the container image'
      publish-container:
        type: boolean
        required: false
        default: false
        description: 'Set if the container image gets publish and scan once its build'
      ref-name:
        type: string
        required: true
        description: 'Short ref name of the branch or tag that triggered the workflow run'
    secrets:
      registry-0-url:
        required: true
      registry-0-usr:
        required: true
      registry-0-psw:
        required: true

jobs:
  build-node:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2

      - name: Set up NodeJs
        uses: actions/setup-node@v4.4.0
        with:
          node-version: '20'
          cache: 'npm'

      - name: Run Npm Build
        env:
          CI: true
        run: |-
          npm ci
          npm run build --if-present

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: assembled-frontend
          path: |-
            dist/
            bom.*

  build-container:
    runs-on: ubuntu-latest
    needs:
      - build-node

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2

      - name: Download Artifacts
        uses: actions/download-artifact@v4.3.0
        with:
          name: assembled-frontend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
        id: buildx
        with:
          install: true

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.registry-0-url }}
          username: ${{ secrets.registry-0-usr }}
          password: ${{ secrets.registry-0-psw }}

      - name: Set Container Tags
        id: tags
        run: |-
          IMAGE_NAME="${{ secrets.registry-0-url }}/dependencytrack/frontend"
          REF_NAME="${{ inputs.ref-name }}"
          TAGS=""

          if [[ $REF_NAME == feature-* ]]; then
            TAGS="${IMAGE_NAME}:${REF_NAME,,}"
          else
            TAGS="${IMAGE_NAME}:${{ inputs.app-version }}"
            if [[ "${{ inputs.app-version }}" != "snapshot" ]]; then
              TAGS="${TAGS},${IMAGE_NAME}:latest"
            fi
          fi
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT


      - name: Build multi-arch Container Image with explicit builder
        run: |
          docker buildx create --name dbuilder --driver docker-container --use --bootstrap
          
          TAGS="${{ steps.tags.outputs.tags }}"
          TAG_LIST="${TAGS//,/ }"
          
          TAG_ARGS=""
          for tag in $TAG_LIST; do
            TAG_ARGS="$TAG_ARGS --tag $tag"
          done
          
          docker buildx build \
            --builder dbuilder \
            --build-arg APP_VERSION=${{ inputs.app-version }} \
            --build-arg COMMIT_SHA=${{ github.sha }} \
            --platform linux/amd64,linux/arm64 \
            $TAG_ARGS \
            --push \
            --file docker/Dockerfile.alpine \
            .
